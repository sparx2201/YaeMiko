# Credits: 
# @MyselfShuyaa
# @Not_Coding
# @SIAmKira
# @botsupportx

import html
import requests
import time
import os
from pyrogram import filters
from Mikobot import app
from Mikobot.plugins.disable import DisableAbleCommandHandler
from Mikobot import dispatcher
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CommandHandler
from telegram.error import BadRequest
from telegram import User
from telegram.constants import ParseMode
from telegram.helpers import mention_html
#from telegram.ext import CommandHandler



blacklisted_words = [
"Pornography",
"Nude",
"Naked",
"Explicit",
"XXX",
"Sex",
"Erotic",
"Obscene",
"Hardcore",
"NSFW",
"Sexual",
"Intimate",
"Sensual",
"Racy",
"Provocative",
"Lewd",
"Indecent",
"Steamy",
"Vulgar",
"Salacious",
"Naughty",
"Titillating",
"X-rated",
"Suggestive",
"Raunchy",
"Carnal",
"Prurient",
"Dirty",
"Smutty",
"Filthy",
"Nudity",
"Undressed",
"Exposed",
"Unclad",
"Bare",
"Flesh",
"Eroticized",
"Kinky",
"Fetish",
"Perversion",
"Taboo",
"Deviant",
"Degenerate",
"Debauchery",
"Libertine",
"Whore",
"Slut",
"Prostitute",
"Escort",
"Brothel",
"Pimp",
"Orgy",
"Threesome",
"Gangbang",
"Swinger",
"Voyeur",
"Exhibitionist",
"Masturbation",
"Spank",
"BDSM",
"Bondage",
"Discipline",
"Submission",
"Sadism",
"Masochism",
"Fornication",
"Copulation",
"Intercourse",
"Coitus",
"Penetration",
"Ejaculation",
"Sperm",
"Cum",
"Oral",
"Blowjob",
"Cunnilingus",
"Anal",
"Butt",
"Ass",
"Tits",
"Boobs",
"Breasts",
"Genitals",
"Vagina",
"Vulva",
"Clitoris",
"Penis",
"Testicles",
"Scrotum",
"Labia",
"Anus",
"Buttocks",
"Pubic",
"fucking", "fucked",
]





async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # Get the user who sent the command
    user = update.message.from_user

    # Get the reply message if the command is a reply to another message
    if update.message.reply_to_message:
        user_id = update.message.reply_to_message.from_user.id
        user = await context.bot.get_user(user_id)

    # Get the prompt from the command
    prompt = ' '.join(update.message.command[1:])

    if any(word.lower() in prompt.lower() for word in blacklisted_words):
        await update.message.reply_text("Warning: Your prompt contains a blacklisted word.")
        return

    # Send a message to inform the user to wait
    wait_message = await update.message.reply_text("Generating your image...")
    StartTime = time.time()

    # API endpoint URL
    url = 'https://ai-api.magicstudio.com/api/ai-art-generator'

    # Form data for the request
    form_data = {
        'prompt': prompt,
        'output_format': 'bytes',
        'request_timestamp': str(int(time.time())),
        'user_is_subscribed': 'false',
    }

    # Send a POST request to the API
    response = requests.post(url, data=form_data)

    if response.status_code == 200:
        try:
            if response.content:
                destination_dir = ''
                destination_path = os.path.join(destination_dir, 'img_gen_byJinx.jpg')

                # Save the image to the destination path
                with open(destination_path, 'wb') as f:
                    f.write(response.content)

                # Delete the wait message
                await wait_message.delete()

                # Send the generated image
                await update.message.reply_photo(destination_path, caption=f"**Generated By** : {user.mention()}\n**Powered By** : @JinX_UBot\n**Prompt** : `{prompt}`")
                await update.message.delete()

                # Delete the generated image after sending
                os.remove(destination_path)
            else:
                await wait_message.edit_text("Failed to generate the image.")
        except Exception as e:
            await wait_message.edit_text("Error: {}".format(e))
    else:
        await wait_message.edit_text("Error: {}".format(response.status_code))

# Define the DisableAbleCommandHandler for the /create command
GEN_HANDLER = DisableAbleCommandHandler("create", generate_image, block=False)

# Add the handler to the dispatcher
dispatcher.add_handler(GEN_HANDLER)
