# CREATED BY: https://t.me/O_oKarma
# API CREDITS: @Qewertyy
# PROVIDED BY: https://github.com/Team-ProjectCodeX

# <============================================== IMPORTS =========================================================>
import base64

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import CommandHandler, ContextTypes

from Mikobot import LOGGER as logger
from Mikobot import function
from Mikobot.state import state

# <=======================================================================================================>

# <================================================ CONSTANTS =====================================================>
API_URL = "https://lexica.qewertyy.me/models"
PALM_MODEL_ID = 0
GPT_MODEL_ID = 5

# <================================================ FUNCTIONS =====================================================>


async def get_api_response(model_id, api_params, api_url):
    try:
        response = await state.post(api_url, params=api_params)
        if response.status_code == 200:
            data = response.json()
            return data.get(
                "content", f"Error: Empty response received from the {model_id} API."
            )
        else:
            return f"Error: Request failed with status code {response.status_code}."
    except state.RequestError as e:
        return f"Error: An error occurred while calling the {model_id} API. {e}"


async def palm_chatbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Error: Missing input text after /palm command.",
        )
        return

    input_text = " ".join(args)

    result_msg = await context.bot.send_message(
        chat_id=update.effective_chat.id, text="ðŸŒ´"
    )

    api_params = {"model_id": PALM_MODEL_ID, "prompt": input_text}
    api_response = await get_api_response("PALM", api_params, API_URL)

    await result_msg.delete()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=api_response)


async def gpt_chatbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Error: Missing input text after /askgpt command.",
        )
        return

    input_text = " ".join(args)

    result_msg = await context.bot.send_message(
        chat_id=update.effective_chat.id, text="ðŸ’¬"
    )

    api_params = {"model_id": GPT_MODEL_ID, "prompt": input_text}
    api_response = await get_api_response("GPT", api_params, API_URL)

    await result_msg.delete()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=api_response)


# Define the upscale_image function
async def upscale_image(client, message):
    try:
        # Check if the replied message contains a photo
        if message.reply_to_message and message.reply_to_message.photo:
            # Send a message indicating upscaling is in progress
            progress_msg = await message.reply_text(
                "Upscaling your image, please wait..."
            )

            # Access the image file_id from the replied message
            image = message.reply_to_message.photo.file_id
            file_path = await client.download_media(image)

            with open(file_path, "rb") as image_file:
                f = image_file.read()

            b = base64.b64encode(f).decode("utf-8")

            async with httpx.AsyncClient() as http_client:
                response = await http_client.post(
                    "https://api.qewertyy.me/upscale",
                    data={"image_data": b},
                    timeout=None,
                )

            # Save the upscaled image
            upscaled_file_path = "upscaled_image.png"
            with open(upscaled_file_path, "wb") as output_file:
                output_file.write(response.content)

            # Delete the progress message
            await progress_msg.delete()

            # Send the upscaled image as a PNG file
            await client.send_document(
                message.chat.id,
                document=upscaled_file_path,
                caption=f"**Generated BY:** @{app.me.username}\nCredits: @ProjectCodeX",
            )
        else:
            await message.reply_text("Hey Please reply to an image to upscale it.")

    except Exception as e:
        print(f"Failed to upscale the image: {e}")
        await message.reply_text("Failed to upscale the image. Please try again later.")

# <================================================ HANDLER =======================================================>
# Register the upscale_image command handler
function(CommandHandler("upscale", upscale_image, block=False))
function(CommandHandler("palm", palm_chatbot, block=False))
function(CommandHandler("askgpt", gpt_chatbot, block=False))
# <================================================ END =======================================================>
